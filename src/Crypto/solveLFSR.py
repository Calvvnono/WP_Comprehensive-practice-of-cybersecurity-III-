# Python
from sympy import symbols, GF, poly
from sympy.polys.polytools import invert, div
from Crypto.Util.number import long_to_bytes

# 将输出的比特序列复制到这里
bits
# 将比特序列转换为整数列表
s = [int(b) for b in bits]

# 实现 Berlekamp-Massey 算法
def berlekamp_massey(s):
    n = len(s)
    c = [0]*n
    b = [0]*n
    c[0], b[0] = 1, 1
    l, m, bb = 0, -1, 1
    for i in range(n):
        d = s[i]
        for j in range(1, l+1):
            d ^= c[j]*s[i-j]
        if d == 1:
            t = c[:]
            for j in range(i - m, n):
                c[j] ^= b[j - (i - m)]
            if 2 * l <= i:
                l = i + 1 - l
                m = i
                b = t
    return c[:l+1], l

# 获取反馈多项式和寄存器长度
poly_coeffs, span = berlekamp_massey(s)
print("反馈多项式系数:", poly_coeffs)
print("寄存器长度:", span)

# 构建反馈多项式
F = GF(2)
x = symbols('x')
feedback_poly = sum([poly_coeffs[i]*x**i for i in range(len(poly_coeffs))])
feedback_poly = poly(feedback_poly, x, modulus=2)
print("反馈多项式:", feedback_poly)

# 逆向初始状态
# 由于已知输出序列，我们可以使用已知的反馈多项式和输出序列，求解初始状态
N = len(s)
state = s[:span][::-1]  # 初始状态

# 将比特序列转换为字节，得到 FLAG
flag_bits = state[::-1]
flag_int = 0
for bit in flag_bits:
    flag_int = (flag_int << 1) | bit

flag_bytes = long_to_bytes(flag_int)
print("FLAG:", flag_bytes)